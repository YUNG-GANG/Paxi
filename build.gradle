buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

// Maven info
version = "${modMinecraftVersion}-${modVersion}"
group = modGroup
archivesBaseName = modFileName

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: modMcpMappingsChannel, version: modMcpMappingsVersion
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')
			arg "-mixin.config=" + modId + ".mixins.json"
            property 'mixin.env.disableRefMap', 'true'
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//            property 'forge.logging.console.level', 'debug'

			mods { paxi { source sourceSets.main } }
		}

		server {
			workingDirectory project.file('run')
			arg "-mixin.config=" + modId + ".mixins.json"
            property 'mixin.env.disableRefMap', 'true'
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//            property 'forge.logging.console.level', 'debug'

			mods { paxi { source sourceSets.main } }
		}

		data {
			workingDirectory project.file('run')
//			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
//			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'paxi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods { paxi { source sourceSets.main } }
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenCentral()
}

dependencies {
	minecraft "net.minecraftforge:forge:" + modMinecraftVersion + "-" + modForgeVersion
	implementation fg.deobf("com.yungnickyoung.minecraft.yungsapi:YungsApi:${yungsApiVersion}")
	if (System.getProperty("idea.sync.active") != "true") {
		annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
	}
}

processResources {
	// this will ensure that this task is redone when any variables change
	inputs.property "modId", modId
	inputs.property "version", project.version
	inputs.property "modName", modName
	inputs.property "modCredits", modCredits
	inputs.property "modAuthor", modAuthor
	inputs.property "modDescription", modDescription
	inputs.property "modMinecraftVersion", modMinecraftVersion

	// Replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		// Replace vars in mods.toml
		expand 'modId':modId,
				'version': project.version,
				'modName':modName,
				'modCredits':modCredits,
				'modAuthor':modAuthor,
				'modDescription':modDescription,
				'modMinecraftVersion': modMinecraftVersion
	}

	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

// Get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title"     : modId,
				"Specification-Vendor"    : modGroup,
				"Specification-Version"   : "1.0", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : modGroup,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned",
				"MixinConfigs": "${modId}.mixins.json"
		],)
	}
}

jar.finalizedBy('reobfJar')

mixin {
	add sourceSets.main, "${modId}.refmap.json"
}